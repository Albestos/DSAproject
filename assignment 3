Question 1: Graph Algorithms for Shortest Path Problem
CODE:
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <limits>
#include <chrono>
using namespace std;
using namespace std::chrono;
struct Edge {
    int dest;
    int weight;
};

class Graph {
public:
    unordered_map<int, vector<Edge>> adjList;

    void addEdge(int src, int dest, int weight) {
        adjList[src].push_back({dest, weight});
    }

    void readGraphFromFile(const string& filePath) {
        ifstream file(filePath);
        int src, dest, weight;
        while (file >> src >> dest >> weight) {
            addEdge(src, dest, weight);
        }
    }
};

// Dijkstra's Algorithm
unordered_map<int, int> dijkstra(const Graph& graph, int start) {
    unordered_map<int, int> distances;
    for (const auto& pair : graph.adjList) {
        distances[pair.first] = numeric_limits<int>::max();
    }
    distances[start] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        int currentDistance = pq.top().first;
        int currentNode = pq.top().second;
        pq.pop();

        if (currentDistance > distances[currentNode]) {
            continue;
        }

        auto it = graph.adjList.find(currentNode);
        if (it != graph.adjList.end()) {
            for (const Edge& edge : it->second) {
                int distance = currentDistance + edge.weight;
                if (distance < distances[edge.dest]) {
                    distances[edge.dest] = distance;
                    pq.push({distance, edge.dest});
                }
            }
        }
    }

    return distances;
}

// Bellman-Ford Algorithm
unordered_map<int, int> bellmanFord(const Graph& graph, int start) {
    unordered_map<int, int> distances;
    for (const auto& pair : graph.adjList) {
        distances[pair.first] = numeric_limits<int>::max();
    }
    distances[start] = 0;

    int V = graph.adjList.size();
    for (int i = 1; i <= V - 1; ++i) {
        for (const auto& pair : graph.adjList) {
            int u = pair.first;
            for (const Edge& edge : pair.second) {
                int v = edge.dest;
                int weight = edge.weight;
                if (distances[u] != numeric_limits<int>::max() && distances[u] + weight < distances[v]) {
                    distances[v] = distances[u] + weight;
                }
            }
        }
    }

    for (const auto& pair : graph.adjList) {
        int u = pair.first;
        for (const Edge& edge : pair.second) {
            int v = edge.dest;
            int weight = edge.weight;
            if (distances[u] != numeric_limits<int>::max() && distances[u] + weight < distances[v]) {
                throw runtime_error("Graph contains a negative weight cycle");
            }
        }
    }

    return distances;
}

void printDistances(const unordered_map<int, int>& distances) {
    for (const auto& pair : distances) {
        cout << "Distance from start to " << pair.first << " is " << pair.second << endl;
    }
}

int main() {
    Graph graph;
    string filePath = "graph_data.txt";
    graph.readGraphFromFile(filePath);

    int startNode = 0; // Change as necessary

    auto start = high_resolution_clock::now();
    auto dijkstraDistances = dijkstra(graph, startNode); // Dijkstra's Algorithm called here
    auto stop = high_resolution_clock::now();
    auto dijkstraDuration = duration_cast<microseconds>(stop - start);

    cout << "Dijkstra's Algorithm:" << endl;
    printDistances(dijkstraDistances);
    cout << "Time: " << dijkstraDuration.count() << " microseconds" << endl;

    start = high_resolution_clock::now();
    try {
        auto bellmanFordDistances = bellmanFord(graph, startNode); // Bellman-Ford Algorithm called here
        stop = high_resolution_clock::now();
        auto bellmanFordDuration = duration_cast<microseconds>(stop - start);

        cout << "Bellman-Ford Algorithm:" << endl;
        printDistances(bellmanFordDistances);
        cout << "Time: " << bellmanFordDuration.count() << " microseconds" << endl;
    } catch (const runtime_error& e) {
        stop = high_resolution_clock::now();
        auto bellmanFordDuration = duration_cast<microseconds>(stop - start);
        cout << "Bellman-Ford Algorithm:" << endl;
        cout << e.what() << endl;
        cout << "Time: " << bellmanFordDuration.count() << " microseconds" << endl;
    }

    return 0;
}

